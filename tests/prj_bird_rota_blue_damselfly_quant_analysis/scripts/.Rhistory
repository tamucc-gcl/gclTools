fit_models <- function(x_var, y_var, data){
## Fit big models
fit_linear <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Linear",
degree = NULL
)
fit_power <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Power",
degree = NULL
)
fit_polynomial <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Polynomial",
degree = 2
)
fit_polynomial3 <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Polynomial",
degree = 3
)
## Jacknife to check bad fits
jacknife_standards <- mutate(data,
sample_id = row_number()) %>%
filter(include_in_model) %>%
expand_grid(tibble(model = c('Linear', 'Power', 'Polynomial', 'Polynomial'),
degree = c(NA_integer_, NA_integer_, 2, 3),
full_model = list(fit_linear$fit, fit_power$fit, fit_polynomial$fit, fit_polynomial3$fit))) %>%
nest(removed_standard = -c(sample_id, model, degree, full_model)) %>%
rowwise %>%
#Make dataset with one standard removed
mutate(other_standards = list(anti_join(data,
removed_standard,
by = colnames(removed_standard)))) %>%
#Fit model without standard
mutate(jacknife_model = list(fit_and_plot(x_var = x_var,
y_var = y_var,
data = other_standards,
model_type = model,
degree = degree) %>%
pluck('fit'))) %>%
#Calculate predicted values with/without point
mutate(observed_standard = removed_standard[["dna_per_well"]],
across(c(full_model, jacknife_model),
list(prediction = ~predict(., newdata = removed_standard)),
.names = "{stringr::str_replace(.col, 'model', .fn)}")) %>%
ungroup %>%
#Calculate relative difference between the standard's known value and the predicted DNA
mutate(across(ends_with('prediction'),
~sqrt((. - observed_standard)^2) / observed_standard,
.names = "{stringr::str_replace(.col, 'prediction', 'relDiff')}"),
.keep = 'unused') %>%
#Smaller is better - larger differences mean relative to the y-value the predicted value without that point was much different than it was with that point
mutate(rel_improvement = sqrt((full_relDiff - jacknife_relDiff)^2),
.keep = 'unused') %>%
select(sample_id, model, degree, rel_improvement)
## Refit without outliers
standards_without_outliers <- jacknife_standards %>%
mutate(is_outlier = identify_outliers(rel_improvement),
.by = c('model', 'degree'), .keep = 'unused') %>%
filter(all(is_outlier),
.by = 'sample_id') %>%
select(-is_outlier) %>%
summarise(outlier_standards = list(c(sample_id) %>% unique)) %>%
rowwise %>%
mutate(new_standards = list(mutate(data,
sample_id = row_number(),
include_in_model = !sample_id %in% outlier_standards & include_in_model)),
.keep = 'unused') %>%
ungroup %>%
unnest(new_standards)
fit_linear <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Linear",
degree = NULL
)
fit_power <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Power",
degree = NULL
)
fit_polynomial <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Polynomial",
degree = 2
)
fit_polynomial3 <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Polynomial",
degree = 3
)
tibble(model = c('linear', 'power', 'poly2', 'poly3'),
fit = list(fit_linear$fit,
fit_power$fit,
fit_polynomial$fit,
fit_polynomial3$fit),
plot = list(fit_linear$plot,
fit_power$plot,
fit_polynomial$plot,
fit_polynomial3$plot))
}
rank_models <- function(models) {
model_names <- names(models)
if (is.null(model_names)) {
stop("Please provide named arguments for each model (e.g., linear = fit_linear).")
}
metrics_df <- tibble(
model = model_names,
AIC = map_dbl(models, AIC),
BIC = map_dbl(models, BIC),
RSE = map_dbl(models, ~ summary(.x)$sigma)
) %>%
mutate(
AIC_rank = dense_rank(AIC),
BIC_rank = dense_rank(BIC),
RSE_rank = dense_rank(RSE),
total_rank = AIC_rank + BIC_rank + RSE_rank
)
model_priority <- c("power", "polynomial", "linear")
metrics_df %>%
mutate(
model_factor = factor(model,
levels = model_priority,
ordered = T)
) %>%
arrange(
total_rank,
BIC,
AIC,
RSE,
model_factor
)
}
# Settings
path_dna_plate_map <-
paste0(
"../data_raw/",
"rbd_edna-extraction_plate-map.xlsx"
)
sheet_metadata <- "Plate-map-tidy"
quant_kit <- "accuclear" # Choices: accublue-nextgen or accuclear
remove_these_standards <- c(0)
path_quant_report_summarized <-
paste0(
"../data_processed/",
"rbd_edna_requant_report_merged_summarized.csv"
)
path_quant_plot <-
paste0(
"../results/",
"rbd_requant_sample_assessment.png"
)
minimum_pipettable_volume <- 0.75 #uL
maximum_low_volume <- 4
target_dna <- 2 #multiplier_on mean
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
dna_plate_map
names(dna_plate_map )
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id = zymo_plate_id,
requant_plate_col = zymo_plate_col,
requant_plate_row = zymo_plate_row)
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
names(dna_plate_map)
is.na(trasnfer_plate)
is.na(dna_plate_map$transfer_plate)
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
)
)
view(dna_plate)
view(dna_plate_map)
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
),
requant_plate_row =
case_when (
!is.na(transfer_plate_row) ~ transfer_plate_row,
T ~ zymo_plate_row
),
requant_plate_col =
case_when (
!is.na(transfer_plate_col) ~ transfer_plate_col,
T ~ zymo_plate_col
)
)
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
),
requant_plate_row =
case_when (
!is.na(transfer_plate_row) ~ transfer_plate_row,
T ~ zymo_plate_row
),
requant_plate_col =
case_when (
!is.na(transfer_plate_col) ~ transfer_plate_col,
T ~ zymo_plate_col
)
)
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
),
requant_plate_row =
case_when (
!is.na(transfer_plate_row) ~ transfer_plate_row,
T ~ zymo_plate_row
),
requant_plate_col =
case_when (
!is.na(transfer_plate_col) ~ transfer_plate_col,
T ~ zymo_plate_col
)
)
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
),
requant_plate_row =
case_when (
!is.na(transfer_plate_row) ~ transfer_plate_row,
T ~ zymo_plate_row
),
requant_plate_col =
case_when (
!is.na(transfer_plate_col) ~ transfer_plate_col,
T ~ zymo_plate_col
)
)
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
),
requant_plate_row =
case_when (
!is.na(transfer_plate_row) ~ transfer_plate_row,
T ~ zymo_plate_row
)
)
view(dna_plate_map)
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
na.omit() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
),
requant_plate_row =
case_when (
!is.na(transfer_plate_row) ~ transfer_plate_row,
T ~ zymo_plate_row
),
requant_plate_col =
case_when (
!is.na(transfer_plate_col) ~ transfer_plate_col,
T ~ zymo_plate_col
)
)
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (transfer_plate_col = as.numeric(transfer_plate_col))
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower)) %>%
mutate (transfer_plate_col = as.numeric(transfer_plate_col)) %>%
mutate (requant_plate_id =
case_when (
!is.na(transfer_plate) ~ transfer_plate,
T ~ zymo_plate_id
),
requant_plate_row =
case_when (
!is.na(transfer_plate_row) ~ transfer_plate_row,
T ~ zymo_plate_row
),
requant_plate_col =
case_when (
!is.na(transfer_plate_col) ~ transfer_plate_col,
T ~ zymo_plate_col
)
)
view(dna_plate_map)
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'requants.*\\.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'requants.*\\.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?|requants')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 1)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
## Model standards & predict DNA concentrations
all_quant_models <- all_quant_data %>%
rowwise %>%
mutate(tmp = fit_models(data = standard,
x_var = "rfu",
y_var = "dna_per_well") %>%
list) %>%
unnest(tmp) %>%
rowwise %>%
mutate(min_rfu = min(standard$rfu[standard$include_in_model]),
max_rfu = max(standard$rfu[standard$include_in_model]),
sample_predictions = predict_sample_concentration(sample,
fit,
model,
x_var = 'rfu') %>%
mutate(model = model) %>%
list,
plot = plot_regression_with_samples(
base_plot = plot,
predicted_sample_concentration = sample_predictions,
model_type = model,
min_rfu = min_rfu,
max_rfu = max_rfu
) %>%
list())
## ID Best model for each quant plate
investigate_standard_dropping <- all_quant_models %>%
ungroup %>%
group_by(name) %>%
summarise(top_model = set_names(fit, model) %>%
rank_models() %>%
slice(1) %>%
pull(model),
sample_predictions = bind_rows(sample_predictions) %>%
filter(model == top_model) %>%
list,
plot = list(patchwork::wrap_plots(plot) +
patchwork::plot_annotation(title = str_c('QuantPlate: ', name, '\nTop Model: ', top_model))))
with(investigate_standard_dropping, walk2(plot, name, ~ggsave(plot = .x,
file = str_c('../results/', .y, '_standardFitting.png'),
width = 7.5,
height = 10,
units = "in",
dpi = 330)))
## Get DNA Quant Table
dna_quants <- investigate_standard_dropping %>%
select(name, sample_predictions) %>%
unnest(sample_predictions) %>%
select(-wells)  %>%
left_join (
dna_plate_map,
by = c(
"sample_row" = "zymo_plate_row",
"sample_column" = "zymo_plate_col",
"plate_id" = "zymo_plate_id"
)
) %>%
select (
plate_id,
replicate,
plate_row,
plate_column = plate_col,
quant_row,
quant_column,
sample_volume,
model,
rfu,
dna_per_well,
ng_per_ul,
dna_extract_tube_id,
sample_type
) %>%
mutate (plate_row = toupper(plate_row),
quant_row = toupper(quant_row)
)
