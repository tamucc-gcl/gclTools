plate_id == "standard" ~ "standard",
T ~ "sample")) %>%
split (.$category) %>%
map (., ~select (.x, -category))
quant_data
}
fit_and_plot <- function(
x_var,
y_var,
data,
model_type,
degree = NULL
) {
model_type <-
match.arg(
model_type,
c("Linear", "Power", "Polynomial"))
# Define model formula
model_formula <-
switch(
model_type,
"Linear" = as.formula(paste(y_var, "~", x_var)),
"Power" = as.formula(paste("log10(", y_var, ") ~ log10(", x_var, ")")),
"Polynomial" = as.formula(paste("log10(", y_var, ") ~ poly(log10(", x_var, "), degree =", degree, ")"))
)
# Fit model
fit <- lm(model_formula, data = data %>% filter(include_in_model))
# Summary statistics
model_summary <- summary(fit)
aic <- round(AIC(fit), 4)
bic <- round(BIC(fit), 4)
rse <- round(model_summary$sigma, 4)
subtitle <- as.character(formula(fit))
# Filter data to include only standards marked for modeling
filtered_data <- data %>% filter(include_in_model)
# Generate prediction data
pred_data <-
data.frame(
x_var = seq(min(filtered_data[[x_var]], na.rm = TRUE),
max(filtered_data[[x_var]], na.rm = TRUE),
length.out = 100)
) %>%
setNames(x_var)
# Apply transformations as needed
pred_data <-
pred_data %>%
mutate(
log_rfu = log10(.data[[x_var]]),
log_dna_pred = predict(fit, newdata = .),
dna_pred = if (model_type == "Linear") log_dna_pred else 10^log_dna_pred
)
# Generate plot
plot_model <-
ggplot(
data,
aes(x = log10(.data[[x_var]]),
y = log10(.data[[y_var]]))
) +
# geom_errorbarh(
#   aes(xmin = log10(.data[[x_var]] - rfu_sd),
#       xmax = log10(.data[[x_var]] + rfu_sd),
#       color = include_in_model),
#   height = 0.15) +
geom_point(
aes(shape = "Standard",
color = include_in_model),
size = 2) +
geom_text(
aes(label = .data[[y_var]]),
size = 3.5,
nudge_x = 0.01,
nudge_y = 0.1) +
geom_line(
data = pred_data,
aes(x = log_rfu,
y = log10(dna_pred)),
color = "red",
lwd = 1) +
labs(
title = paste(model_type, "Model"),
subtitle =
paste("Model:",
subtitle[2],
subtitle[1],
subtitle[3],
"\nRSE =", rse,
"; AIC =", aic,
"; BIC =", bic),
x = expression(log[10] * "(RFU)"),
y = if (quant_kit == "accublue-nextgen") {
expression(log[10] * "(DNA concentration; pg/well)")
} else {
expression(log[10] * "(DNA concentration; ng/well)")
}
) +
theme_bw()
list(fit = fit, plot = plot_model)
}
fit_models <- function(x_var, y_var, data){
## Fit big models
fit_linear <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Linear",
degree = NULL
)
fit_power <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Power",
degree = NULL
)
fit_polynomial <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Polynomial",
degree = 2
)
fit_polynomial3 <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = data,
model_type = "Polynomial",
degree = 3
)
## Jacknife to check bad fits
jacknife_standards <- mutate(data,
sample_id = row_number()) %>%
filter(include_in_model) %>%
expand_grid(tibble(model = c('Linear', 'Power', 'Polynomial', 'Polynomial'),
degree = c(NA_integer_, NA_integer_, 2, 3),
full_model = list(fit_linear$fit, fit_power$fit, fit_polynomial$fit, fit_polynomial3$fit))) %>%
nest(removed_standard = -c(sample_id, model, degree, full_model)) %>%
rowwise %>%
#Make dataset with one standard removed
mutate(other_standards = list(anti_join(data,
removed_standard,
by = colnames(removed_standard)))) %>%
#Fit model without standard
mutate(jacknife_model = list(fit_and_plot(x_var = x_var,
y_var = y_var,
data = other_standards,
model_type = model,
degree = degree) %>%
pluck('fit'))) %>%
#Calculate predicted values with/without point
mutate(observed_standard = removed_standard[["dna_per_well"]],
across(c(full_model, jacknife_model),
list(prediction = ~predict(., newdata = removed_standard)),
.names = "{stringr::str_replace(.col, 'model', .fn)}")) %>%
ungroup %>%
#Calculate relative difference between the standard's known value and the predicted DNA
mutate(across(ends_with('prediction'),
~sqrt((. - observed_standard)^2) / observed_standard,
.names = "{stringr::str_replace(.col, 'prediction', 'relDiff')}"),
.keep = 'unused') %>%
#Smaller is better - larger differences mean relative to the y-value the predicted value without that point was much different than it was with that point
mutate(rel_improvement = sqrt((full_relDiff - jacknife_relDiff)^2),
.keep = 'unused') %>%
select(sample_id, model, degree, rel_improvement)
## Refit without outliers
standards_without_outliers <- jacknife_standards %>%
mutate(is_outlier = identify_outliers(rel_improvement),
.by = c('model', 'degree'), .keep = 'unused') %>%
filter(all(is_outlier),
.by = 'sample_id') %>%
select(-is_outlier) %>%
summarise(outlier_standards = list(c(sample_id) %>% unique)) %>%
rowwise %>%
mutate(new_standards = list(mutate(data,
sample_id = row_number(),
include_in_model = !sample_id %in% outlier_standards & include_in_model)),
.keep = 'unused') %>%
ungroup %>%
unnest(new_standards)
fit_linear <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Linear",
degree = NULL
)
fit_power <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Power",
degree = NULL
)
fit_polynomial <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Polynomial",
degree = 2
)
fit_polynomial3 <-
fit_and_plot(
x_var = x_var,
y_var = y_var,
data = standards_without_outliers,
model_type = "Polynomial",
degree = 3
)
tibble(model = c('linear', 'power', 'poly2', 'poly3'),
fit = list(fit_linear$fit,
fit_power$fit,
fit_polynomial$fit,
fit_polynomial3$fit),
plot = list(fit_linear$plot,
fit_power$plot,
fit_polynomial$plot,
fit_polynomial3$plot))
}
rank_models <- function(models) {
model_names <- names(models)
if (is.null(model_names)) {
stop("Please provide named arguments for each model (e.g., linear = fit_linear).")
}
metrics_df <- tibble(
model = model_names,
AIC = map_dbl(models, AIC),
BIC = map_dbl(models, BIC),
RSE = map_dbl(models, ~ summary(.x)$sigma)
) %>%
mutate(
AIC_rank = dense_rank(AIC),
BIC_rank = dense_rank(BIC),
RSE_rank = dense_rank(RSE),
total_rank = AIC_rank + BIC_rank + RSE_rank
)
model_priority <- c("power", "polynomial", "linear")
metrics_df %>%
mutate(
model_factor = factor(model,
levels = model_priority,
ordered = T)
) %>%
arrange(
total_rank,
BIC,
AIC,
RSE,
model_factor
)
}
# Settings
path_dna_plate_map <-
paste0(
"../data_raw/",
"rbd_edna-extraction_plate-map.xlsx"
)
sheet_metadata <- "Plate-map-tidy"
quant_kit <- "accuclear" # Choices: accublue-nextgen or accuclear
remove_these_standards <- c(0)
path_dna_plate_map
path_quant_report_summarized <-
paste0(
"../data_processed/",
"rbd_edna_quant_report_merged_summarized.csv"
)
path_quant_plot <-
paste0(
"../results/",
"rbd_quant_sample_assessment.png"
)
minimum_pipettable_volume <- 0.75 #uL
maximum_low_volume <- 4
target_dna <- 2 #multiplier_on mean
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
dna_plate_map
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE))
tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE)
)
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?'))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name)
all_quant_data
view(all_quant_data)
data_plate
tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
#rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map))
tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map))
rlang::last_trace()
list.fils("../data_processed")
list.files("../data_processed")
list.files("../data_processed", pattern = "plate-map_formatted.csv", full.names = TRUE)
tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE))
list.files("../data_processed") %>% writeLines()
readr::read_csv("../data_processed/rbd_edna-plate04_Column-9_AccuClear_2024-08-15_plate-map_formatted.csv")
readr::read_csv("../data_processed/rbd_edna-plate04_AccuClear_2024-08-13_plate-map_formatted.csv")
readr::read_csv("../data_processed/rbd_edna-plate04_Column-9_AccuClear_2024-08-15_plate-map_formatted.csv")
readr::read_csv("../data_processed/rbd_edna-plate04_AccuClear_2024-08-13_plate-map_formatted.csv")
readr::read_csv("../data_processed/rbd_edna-plate04_Column-9_AccuClear_2024-08-15_plate-map_formatted.csv")
list.files("../data_processed", pattern = "plate-map_formatted.csv", full.names = TRUE)
fs::dir_ls("../data_processed", glob = "*plate-map_formatted.csv")
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
list.files("../data_raw")
readr::read_csv("../data_processed/rbd_edna-plate04_AccuClear_2024-08-13_plate-map_formatted.csv")
readr::read_csv("../data_processed/rbd_edna-plate04_Column-9_AccuClear_2024-08-15_plate-map_formatted.csv")
readr::read_csv("../data_processed/rbd_edna-plate04_Column-9_AccuClear_2024-08-15_quant_report_replicates.csv")
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
readr::read_csv("../data_processed/rbd_edna-plate04_Column-9_AccuClear_2024-08-15_plate-map_formatted (1).csv")
#### Read in Data ####
dna_plate_map <-
read_xlsx(
path_dna_plate_map,
sheet = sheet_metadata
) %>%
clean_names() %>%
mutate (wells = paste0(plate_row, plate_col)) %>%
mutate(across(where(is.character), str_to_lower))
all_quant_data <- tibble(data_plate = list.files('../data_raw/', pattern = 'raw-data.csv$', full.names = TRUE),
plate_map = list.files('../data_processed/', pattern = 'map_formatted.csv$', full.names = TRUE)) %>%
mutate(name = str_extract(data_plate, 'plate[0-9]+(_Column-9)?')) %>%
rowwise(name) %>%
reframe(quant_data = read_quant_data(data_plate, plate_map)) %>%
mutate(type = rep(c('sample', 'standard'), 6)) %>%
pivot_wider(names_from = type, values_from = quant_data) %>%
rowwise %>%
mutate(standard = mutate(standard,
sample_id = as.numeric(sample_id),
dna_per_ul = as.numeric(sample_id),
dna_per_well = dna_per_ul * sample_volume,
include_in_model = !dna_per_well %in% remove_these_standards) %>%
filter (sample_id != 0) %>%
list) %>%
ungroup
